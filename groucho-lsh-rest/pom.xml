<!-- This file is part of GROUCHO, originally developed at CNR-IASI. For
	more information visit: http://saks.iasi.cnr.it/tools/groucho This is free
	software: you can redistribute it and/or modify it under the terms of the
	GNU General Public License as published by the Free Software Foundation,
	either version 3 of the License, or (at your option) any later version. This
	software is distributed in the hope that it will be useful, but WITHOUT ANY
	WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
	FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
	You should have received a copy of the GNU General Public License along with
	this source. If not, see <http://www.gnu.org/licenses/>. -->

<project
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"
	xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<modelVersion>4.0.0</modelVersion>
	<groupId>it.cnr.iasi.saks.groucho</groupId>
	<artifactId>groucho-lsh-rest</artifactId>
	<version>1.0-SNAPSHOT</version>
	<name>groucho-lsh-rest</name>
	<url>http://saks.iasi.cnr.it/tools/groucho</url>

    <parent>
        <groupId>it.cnr.iasi.saks.groucho</groupId>
        <artifactId>groucho</artifactId>
        <version>1.0-SNAPSHOT</version>
    </parent>

	<developers>
		<developer>
			<id>gulyx</id>
			<name>Guglielmo De Angelis</name>
		</developer>
		<developer>
			<id>brenomiranda</id>
			<name>Breno Miranda</name>
		</developer>
		<developer>
			<id>NicoloRogaiUNICAM</id>
			<name>Nicolo Rogai</name>
		</developer>
	</developers>

    <properties>
        <java.version>1.8</java.version>
        <maven.compiler.source>${java.version}</maven.compiler.source>
        <maven.compiler.target>${java.version}</maven.compiler.target>
        <character.encoding>UTF-8</character.encoding>
        <project.build.sourceEncoding>${character.encoding}</project.build.sourceEncoding>
        <project.reporting.outputEncoding>${character.encoding}</project.reporting.outputEncoding>
        <maven.compiler.plugin.version>3.8.0</maven.compiler.plugin.version>
<!--	<maven-surefire.version>3.0.0-M4</maven-surefire.version> -->
        <maven-jar-plugin.version>3.1.1</maven-jar-plugin.version>
        <lsh-invivo.version>1.0-SNAPSHOT</lsh-invivo.version>
        <slf4j.version>1.7.12</slf4j.version>
        <springfox-version>2.9.2</springfox-version>
        <spring.boot.version>2.2.6.RELEASE</spring.boot.version>
        <junit.version>4.4</junit.version>
        <lombok.version>1.18.20</lombok.version>
		<lsh-invivo.directory>${basedir}/../lsh-invivo</lsh-invivo.directory>
		<jep-inst-path>${lsh-invivo.directory}/target/jep-inst</jep-inst-path>
        <sonar.coverage.jacoco.xmlReportPaths>${basedir}/../${aggregate.report.dir}</sonar.coverage.jacoco.xmlReportPaths>
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <type>pom</type>
                <version>${spring.boot.version}</version>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <version>${spring.boot.version}</version>
            <exclusions>
                <exclusion>
                    <groupId>org.slf4j</groupId>
                    <artifactId>slf4j-log4j12</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-tomcat</artifactId>
            <version>${spring.boot.version}</version>
            <exclusions>
                <exclusion>
                    <groupId>org.slf4j</groupId>
                    <artifactId>slf4j-log4j12</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <version>${spring.boot.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger2</artifactId>
            <version>${springfox-version}</version>
        </dependency>
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger-ui</artifactId>
            <version>${springfox-version}</version>
        </dependency>
        <dependency>
            <groupId>com.github.joschi.jackson</groupId>
            <artifactId>jackson-datatype-threetenbp</artifactId>
            <version>2.6.4</version>
        </dependency>
        <dependency>
            <groupId>javax.validation</groupId>
            <artifactId>validation-api</artifactId>
            <version>2.0.1.Final</version>
        </dependency>
        <dependency>
            <groupId>it.cnr.iasi.saks.groucho</groupId>
            <artifactId>lsh-invivo</artifactId>
            <version>${lsh-invivo.version}</version>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>
       <dependency>
           <groupId>org.slf4j</groupId>
           <artifactId>slf4j-log4j12</artifactId>
           <version>${slf4j.version}</version>
       </dependency>
<!--         <dependency> -->
<!--             <groupId>org.projectlombok</groupId> -->
<!--             <artifactId>lombok</artifactId> -->
<!--             <version>${lombok.version}</version> -->
<!--         </dependency> -->
    </dependencies>

    <build>
        <sourceDirectory>src/main/java</sourceDirectory>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>${spring.boot.version}</version>
				<configuration>
<!--  THE FOLLOWING CONFIGURATION IS IMPORTANT IN ORDER TO PACKAGE THE MODULE SO THAT IT CAN BE REUSED BY OTHER MODULES.-->
<!--  SEE THE ANSWERS TO: https://stackoverflow.com/questions/61341102/maven-doesnt-find-imported-class-from-another-module-but-intellij-does-->
				    <classifier>exec</classifier>
					<environmentVariables>
						<PYTHONPATH>${jep-inst-path}/:$PYTHONPATH</PYTHONPATH>
					</environmentVariables>
					<systemPropertyVariables>
						<propertyName>java.library.path</propertyName>
					</systemPropertyVariables>
<!-- 					This is the place-holder **HERE-ARG-LINE** -->
<!--					<argLine>@{argLine} -Djava.library.path=${jep-inst-path}/jep/ -->
					<argLine>-Djava.library.path=${jep-inst-path}/jep/
					</argLine>
				</configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
			        <execution>
			          <id>pre-integration-test</id>
			          <goals>
			            <goal>start</goal>
			          </goals>
			        </execution>
			        <execution>
			          <id>post-integration-test</id>
			          <goals>
			            <goal>stop</goal>
			          </goals>
			        </execution>
                </executions>
            </plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
<!--				<version>${maven-surefire.version}</version> -->
				<executions>
					<execution>
						<goals>
							<goal>test</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<environmentVariables>
						<PYTHONPATH>${jep-inst-path}/:$PYTHONPATH</PYTHONPATH>
					</environmentVariables>
					<systemPropertyVariables>
						<propertyName>java.library.path</propertyName>
					</systemPropertyVariables>
<!-- 					This is the place-holder **HERE-ARG-LINE** -->
<!--					<argLine>@{argLine} -Djava.library.path=${jep-inst-path}/jep/ -->
					<argLine>-Djava.library.path=${jep-inst-path}/jep/
					</argLine>
				</configuration>
			</plugin>

        </plugins>
    </build>
</project>
